<?php

namespace Northrook\Storage\Store;

use InvalidArgumentException;
use Northrook\Core\Timestamp;
use Northrook\Resource\Path;
use Northrook\Storage\Autosave;
use Northrook\Storage\StorageManager;
use Northrook\Time;
use Symfony\Component\VarExporter\Exception\ExceptionInterface;
use Symfony\Component\VarExporter\VarExporter;
use function Northrook\classBasename;
use function Northrook\getProjectRootDirectory;
use function Northrook\hashKey;
use function Northrook\normalizeKey;

const
AUTOSAVE_ON_SHUTDOWN = 'autosave-shutdown',
AUTOSAVE_ON_DESTROY  = 'autosave-destroy';

abstract class StorageEntity
{
    protected readonly Path    $storagePath;
    protected bool             $locked = false;
    protected readonly ?string $storedHash;
    protected readonly ?int    $timestampCreated;

    public readonly string $name;

    public function __construct(
        ?string            $name = null,
        ?string            $storagePath = null,
        protected bool     $readonly = false,
        protected Autosave $autosave = Autosave::DISABLED,
    ) {
        $this->name        = $this->key( $name ?? classBasename( $this::class ) );
        $this->storagePath = new Path( $storagePath ?? StorageManager::get()->storageDirectory );
    }

    final protected function storagePath(
        string  $filename,
        ?string $directory = null,
        string  $filetype = 'php',
    ) : self {
        $this->storagePath->append( $directory, "$filename.$filetype" );
        return $this;
    }

    abstract protected function saveEntityData() : mixed;

    final protected function loadDataStore() : ?array {
        if ( !$this->storagePath->exists ) {
            dump( "No entity at $this->storagePath" );
            return null;
        }

        $dataStore = include $this->storagePath->path;

        $this->storedHash = $dataStore[ 'hash' ];

        return $dataStore;
    }

    final public function save() : self {
        // Prevent changes to the $data until we're done saving
        $this->locked = true;

        $data = $this->saveEntityData();
        $hash = $this->hash( $data );

        if ( $this->storedHash ?? null !== $hash ) {
            dump( ' We should indeed save this ' );
        }

        $dataStore = $this->createDataStore( $data, $hash );

        $this->storagePath->save( $dataStore );

        return $this;
    }

    final public function readonly( bool $set = true ) : self {
        $this->readonly = $set;
        return $this;
    }

    final public function autosave( Autosave $set = Autosave::ON_SHUTDOWN ) : self {
        $this->autosave = $set;
        return $this;
    }

    final protected function key( string $string ) : string {
        return normalizeKey( $string, '-', 4096 );
    }

    final protected function hash( mixed $data ) : string {
        return hashKey( $data, 'serialize' );
    }

    //::: Data Storage Object ::::::::::::::::::

    private function createDataStore( mixed $data, string $hash ) : string {

        $generated = new Time();
        $generator = static::class;

        try {
            $dataStore = VarExporter::export(
                [
                    'name'      => $this->name,
                    'path'      => $this->storagePath->path,
                    'generator' => $this::class,
                    'generated' => $generated->datetime,
                    'timestamp' => $generated->unixTimestamp,
                    'type'      => gettype( $data ),
                    'hash'      => $hash,
                    'data'      => $data,
                ],
            );
        }
        catch ( ExceptionInterface $exception ) {
            throw new InvalidArgumentException(
                message  : "Unable to export the $this->name dataStore.",
                code     : 500,
                previous : $exception,
            );
        }

        return <<<PHP
            <?php // $generated->unixTimestamp

            /*---------------------------------------------------------------------
            
               Name      : $this->name
               Generated : $generated->datetime
               Hash      : $hash

               This file is generated by $generator.

               Do not edit it manually.

               See https://github.com/northrook/cache for more information.

            ---------------------------------------------------------------------*/

            return $dataStore;
            PHP;
    }

}